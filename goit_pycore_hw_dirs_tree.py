"""
–†–æ–∑—Ä–æ–±—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –ø—Ä–∏–π–º–∞—î —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –≤ —è–∫–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—É –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ —ñ –≤—ñ–∑—É–∞–ª—ñ–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü—ñ—î—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, –≤–∏–≤–æ–¥—è—á–∏ —ñ–º–µ–Ω–∞ –≤—Å—ñ—Ö –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —Ç–∞ —Ñ–∞–π–ª—ñ–≤. –î–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è, —ñ–º–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —Ç–∞ —Ñ–∞–π–ª—ñ–≤ –º–∞—é—Ç—å –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è –∑–∞ –∫–æ–ª—å–æ—Ä–æ–º.



–í–∏–º–æ–≥–∏ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:

–°—Ç–≤–æ—Ä—ñ—Ç—å –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è Python –¥–ª—è —ñ–∑–æ–ª—è—Ü—ñ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç—É.
–°–∫—Ä–∏–ø—Ç –º–∞—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É. –¶–µ–π —à–ª—è—Ö –≤–∫–∞–∑—É—î, –¥–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è, —Å—Ç—Ä—É–∫—Ç—É—Ä—É —è–∫–æ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏.
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ colorama –¥–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è.
–°–∫—Ä–∏–ø—Ç –º–∞—î –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ —è–∫ —ñ–º–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π, —Ç–∞–∫ —ñ —ñ–º–µ–Ω–∞ —Ñ–∞–π–ª—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ–±—Ö–æ–¥—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π (–º–æ–∂–Ω–∞, –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–±).
–ü–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∏–π —à–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –≤—ñ–Ω –Ω–µ –≤–µ–¥–µ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.


–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:

–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É colorama. –î–ª—è —Ü—å–æ–≥–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ç–∞ –∞–∫—Ç–∏–≤—É–π—Ç–µ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è Python, –∞ –ø–æ—Ç—ñ–º –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø–∞–∫–µ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é pip.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–æ–¥—É–ª—å sys –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—É –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞.
–î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–æ–¥—É–ª—å pathlib.
–ó–∞–±–µ–∑–ø–µ—á—Ç–µ –Ω–∞–ª–µ–∂–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ—É–Ω–∫—Ü—ñ—ó colorama.


–ö—Ä–∏—Ç–µ—Ä—ñ—ó –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è:

–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ—á–µ–Ω–Ω—è.
–ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ —à–ª—è—Ö—É –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.
–¢–æ—á–Ω—ñ—Å—Ç—å –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.
–ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é colorama.
–Ø–∫—ñ—Å—Ç—å –∫–æ–¥—É, –≤–∫–ª—é—á–∞—é—á–∏ —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å, —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ.


–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:

–Ø–∫—â–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –π–æ–º—É –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä.

python hw03.py /—à–ª—è—Ö/–¥–æ/–≤–∞—à–æ—ó/–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó

–¶–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —Ç–∞ —Ñ–∞–π–ª—ñ–≤ —É –≤–∫–∞–∑–∞–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ä—ñ–∑–Ω–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —Ç–∞ —Ñ–∞–π–ª—ñ–≤, —â–æ –ø–æ–ª–µ–≥—à–∏—Ç—å –≤—ñ–∑—É–∞–ª—å–Ω–µ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ñ–∞–π–ª–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏.

–î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑—ñ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é

üì¶picture
 ‚î£ üìÇLogo
 ‚îÉ ‚î£ üìúIBM+Logo.png
 ‚îÉ ‚î£ üìúibm.svg
 ‚îÉ ‚îó üìúlogo-tm.png
 ‚î£ üìúbot-icon.png
 ‚îó üìúmongodb.jpg

–°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –≤–∏–≤–µ—Å—Ç–∏ —Å—Ö–æ–∂—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É

"""
import sys
from pathlib import Path
from colorama import Fore, Style
from io import StringIO
from pathlib import Path
import tempfile
import shutil

TEST_DATA_DIR = (Path(__file__).parent).joinpath("test_data")

def print_dir_tree(path: Path, prefix: str = ''):
    """
    Prints the directory tree starting from the given path, displaying directories first and files last,
    with branches, including the parent directory.
    
    Parameters:
    - path (Path): The root directory or file to start the tree from.
    - prefix (str): The prefix to use for indentation and branches.
    """
    # Print the parent directory
    if prefix == '':  # This ensures the parent directory is printed only once
        print(Fore.BLUE + f'üì¶ {path.name}' + Style.RESET_ALL)
    
    items = list(path.iterdir()) if path.is_dir() else []
    directories = [item for item in items if item.is_dir()]
    files = [item for item in items if item.is_file()]

    # Continue with the existing logic to print directories and files
    items_sorted = directories + files  # Directories first, then files

    for i, item in enumerate(items_sorted):
        is_last = i == len(items_sorted) - 1  # Check if the item is the last in the list
        connector = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
        if item.is_dir():
            # Print directory with a blue color
            print(Fore.BLUE + prefix + connector + f'üìÇ {item.name}' + Style.RESET_ALL)
            # Prepare new prefix for the next level, depending on whether the item is the last
            new_prefix = prefix + ("    " if is_last else "‚îÇ   ")
            print_dir_tree(item, new_prefix)
        else:
            # Print file with a green color
            print(Fore.GREEN + prefix + connector + f'üìú {item.name}' + Style.RESET_ALL)
            

# Test function with test cases

def test_print_dir_tree():
    # Create a temporary directory
    temp_dir =tempfile.mkdtemp()
    # Create subdirectories and files
    (Path(temp_dir) / "dir1").mkdir()
    (Path(temp_dir) / "dir1" / "file1.txt").touch()
    (Path(temp_dir) / "file2.txt").touch()
    # Capture the original stdout
    original_stdout = sys.stdout
    sys.stdout = StringIO()
    # Run the function
    print_dir_tree(Path(temp_dir))
    # Get the captured output
    output = str(sys.stdout.getvalue()).strip()
    # Define the expected output
    expected_output = f"üì¶ {Path(temp_dir).name}\n    ‚îú‚îÄ‚îÄ üìÇ dir1\n    ‚îÇ   ‚îî‚îÄ‚îÄ üìú file1.txt\n    ‚îî‚îÄ‚îÄ üìú file2.txt\n".strip()
    # Assert the output
    for line in expected_output:
        assert line in output, f"Expected line: \n{line} \nnot in output: \n{output}"
    # Restore the original stdout
    sys.stdout = original_stdout
    # Remove the temporary directory
    shutil.rmtree(temp_dir)
    
    print("All test cases passed successfully.")
            
def main():
    """
    Main function that processes command line arguments and starts the directory tree printing.
    """
    # Check if exactly one argument (the directory path) is provided.
    if len(sys.argv) != 2:
        print("Usage: python hw03.py <directory>")
        sys.exit(1)
    path = Path(sys.argv[1])
    # Check if the provided path exists.
    if not path.exists():
        print(f"Error: {path} does not exist.")
        sys.exit(1)
    # Start printing the directory tree from the provided path.
    print_dir_tree(path)
    
#Uncomment the following line to run the test function
# test_print_dir_tree()

if __name__ == "__main__":
    main()
